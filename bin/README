

https://github.com/ROCm-Developer-Tools/hcc2/bin/README

HCC2 = Heterogenous Compute Compiler Version 2

This bin directory contains scripts to build HCC2

build_hcc2.sh      -  Build the HCC2 compiler. This compiler supports cuda clang, openmp, and 
                      the OpenCL frontend for cloc.sh to build device libraries.  It contains a 
                      recent version of the AMD Lightning compiler and the ptx backend. 
                      This compiler works for both Nvidia and AMD Radeon GPUs.
                      Please read the help text,  ./build_hcc2.sh -h

build_atmi.sh      -  Builds early release of ATMI for hcc2.
                      This installs in /opt/rocm/hcc2 (or $HCC2)

build_rt.sh        -  Builds the OpenMP libraries for hcc2.
                      This also installs in /opt/rocm/hcc2 (or $HCC2)

build_libamdgcn.sh -  Builds the amd bc libraries from rocm-device-libs needed by hcc2.
                      It installs in /opt/rocm/libamdgcn (or $LIBAMDGCN)

clone_hcc2.sh      -  A script to make sure the necessary repos are cloned and  up to date.
                      See below for a list of these libraries.

HCC2_VERSION_STRING - File to set the version of HCC2 to clone and build . 

The repositories and branches needed by HCC2 are: 

DIRECTORY NAME *                  HCC2 REPOSITORY **       BRANCH
-------------------------------   ---------------------    ------
$HOME/git/hcc2/hcc2               %rocdev/hcc2             master ***
$HOME/git/hcc2/hcc2-clang         %rocdev/hcc2-clang       HCC2_VERSION_STRING  ***
$HOME/git/hcc2/hcc2-rt            %rocdev/hcc2-rt          HCC2_VERSION_STRING  ***
$HOME/git/hcc2/hcc2-llvm          %rocdev/hcc2-llvm        HCC2_VERSION_STRING    
$HOME/git/hcc2/hcc2-lld           %rocdev/hcc2-lld         HCC2_VERSION_STRING
$HOME/git/hcc2/rocm-device-libs   %roc/rocm-device-libs    master
$HOME/git/hcc2/atmi-staging       %roc/atmi-staging        0.4
$HOME/git/hcc2/cudaclang-rt       %roc/cudaclang-rt        master

   * Clone your repositories here or override with environment variables.
  ** Replace %roc with "https://github.com/RadeonOpenCompute"
  ** Replace %rocdev with "https://github.com/ROCm-Developer-Tools"
 *** These are the primary development repositories for HCC2. They are updated often.

The scripts and example makefiles use these environment variables and these 
defaults if they are not set. This is not a complete list.  See the script headers
for other environment variables that you may override including repo names. 

HCC2              /opt/rocm/hcc2           *
LIBAMDGCN         /opt/rocm/libamdgcn      *
CUDA              /usr/local/cuda          *
HCC2_REPOS        /home/$USER/git/hcc2
ROC_REPOS         /home/$USER/git/hcc2
LIBAMDGCN_REPOS   /home/$USER/git/hcc2
NVPTXGPU_DEFAULT  30
BUILD_TYPE        Release
SUDO              set

 * The clang driver uses these environment variables to find device libraries.

If you do not have root access to your machine, you can override the above by setting
the values in your .bashrc or .bash_profile to build your HOME directory.
Here is a sample for your .bash_profile

SUDO="disable"
HCC2=$HOME/hcc2
LIBAMDGCN=$HOME/libamdgcn
BUILD_TYPE=Debug
NVPTXGPU_DEFAULT=50
export SUDO HCC2 LIBAMDGCN NVPTXGPU_DEFAULT BUILD_TYPE

The build scripts will build from the source directories identified by the 
environment variable ROC_REPOS and HCC2_REPOS. The out-of-source build for 
hcc2 will be done in the directory $ROC_REPOS/build_hcc2 . 

To build all components, run the scripts in the following order:

	./build_hcc2.sh
	./build_hcc2.sh install

	./build_atmi.sh
	./build_atmi.sh install

	./build_rt.sh  
	./build_rt.sh  install

	./build_libamdgcn.sh
	./build_libamdgcn.sh install

The scripts do not automatically install in case their is a build failure. 
After all, this is a development project.  In case of a build failure, you 
can restart the build by running "make" or "make install" in the build directory. 

The compiler created by build_hcc2.sh is needed by build_rt.sh 
and build_libamdgcn.sh to build device libraries.  So you must have 
built and installed hcc2 before building the libraries.

-------- Optional ------
For some people access to git repositories in HOME directory is slow. 
The build scripts have an optional feature that will rsync a copy of each of the 
necessary repositories to another directory that may have faster access 
such as /tmp.  This feature could also be useful if you are making lots of 
testing changes that you do not want in your git repository. 
To trigger this feature, set these environment variables: 

export BUILD_HCC2=/tmp/$USER/hcc2
export BUILD_LIBAMDGCN=/tmp/$USER/libamdgcn
export BUILD_RT=/tmp/$USER/rt
export BUILD_ATMI=/tmp/$USER/atmi
