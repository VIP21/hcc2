ifeq ($(LIBAMDGCN),)
  LIBAMDGCN = /opt/rocm/libamdgcn
else
  $(info    WARNING! LIBAMDGCN environment variable is set, using $(LIBAMDGCN))
endif
ifeq ($(HCC2),)
  HCC2 = /opt/rocm/hcc2
else
  $(info    WARNING! HCC2 environment variable is set, using $(HCC2))
endif
ifeq ($(OMPRT),)
  OMPRT = $(HCC2)
else
  $(info    WARNING! OMPRT environment is set, using $(OMPRT))
endif
ifeq ($(ATMI),)
  ifneq ("$(wildcard $(HCC2)/include/atmi.h)","")
    ATMI = $(HCC2)
  else
    $(info    WARNING! No $(HCC2)/include/atmi.h and ATMI environment variable isn't set, using /opt/rocm/atmi)
    ATMI = /opt/rocm/atmi
  endif
else
  $(info    WARNING! ATMI environment variable is set, using $(ATMI))
endif

UNAMEP=$(shell uname -p)

ifeq ($(HOST_TARGET),)
  HOST_TARGET = $(UNAMEP)-pc-linux-gnu
endif
ifeq ($(DEVICE_TARGET),)
  DEVICE_TARGET = nvptx64-nvidia-cuda
  DEVICE_TARGET = amdgcn--cuda
endif

ifeq ($(SMNAME),)
  SMNAME = sm_30
endif
ifeq ($(GFXNAME),)
  GFXNAME = gfx803
endif

ifeq ($(DEVICE_ARCH),)
  DEVICE_ARCH = $(SMNAME)
  DEVICE_ARCH = $(GFXNAME)
endif

ifeq ($(TARGET),)
  TARGET  =  -fopenmp-targets=$(DEVICE_TARGET) --cuda-gpu-arch=$(DEVICE_ARCH)
endif

ifeq ($(OFFLOAD_DEBUG),1)
  $(info    DEBUG Mode ON)
  DEBUG   = -debug
  SET_DEVICE_DEBUG = DEVICE_DEBUG=1
endif

ifeq ($(VERBOSE),1)
  $(info    Compilation VERBOSE Mode ON)
  VERBOSE = -v
endif

CUDA      = /usr/local/cuda

RUNPROF =  $(CUDA)/bin/nvprof 
RUNPROF =  

# Check if the OMPRT is an install or local build
ifeq ("$(wildcard $(OMPRT)/CMakeFiles)","")
  OMPRT_INC    = $(OMPRT)/include
  OMPRT_LIB    = $(OMPRT)/lib$(DEBUG)
  OMPRT_LIB_BC = $(OMPRT)/lib$(DEBUG)/libdevice
else
  OMPRT_INC    = $(OMPRT)/runtime/src
  OMPRT_LIB    = $(OMPRT)/libomptarget/plugins/$(UNAMEP):$(OMPRT)/libomptarget/plugins/hsa:$(OMPRT)/libomptarget/plugins/cuda:$(OMPRT)/libomptarget:$(OMPRT)/runtime/src
  OMPRT_LIB_BC = $(OMPRT)/libomptarget/deviceRTLs/amdgcn:$(OMPRT)/libomptarget/deviceRTLs/nvptx:$(OMPRT)/cugcn/libdevice
endif

# Check if the ATMI is an install or local build
ifeq ("$(wildcard $(ATMI)/CMakeFiles)","")
  ATMI_LIB    = $(ATMI)/lib$(DEBUG)
  ATMI_LIB_BC = $(ATMI)/lib$(DEBUG)/libdevice
else
  ATMI_LIB    = $(ATMI)/lib
  ATMI_LIB_BC = $(ATMI)/lib/libdevice
endif

# Compilation and link require at LIBRARY_PATH
ifeq ($(findstring gfx,$(TARGET)),)
_LIBPATH = $(OMPRT_LIB_BC):$(OMPRT_LIB):$(CUDA)/targets/$(UNAMEP)-linux/lib
else
_LIBPATH = $(OMPRT_LIB_BC):$(OMPRT_LIB):$(ATMI_LIB_BC):$(ATMI_LIB):$(LIBAMDGCN)/$(GFXNAME)/lib
endif

SETENV   = env LIBRARY_PATH=$(_LIBPATH) PATH=$(HCC2)/bin:$(PATH)

# The ATMI and LOCH libraries are needed for dynamic runtime linking.
ifeq ($(findstring gfx,$(TARGET)),)
_LDPATH  = $(OMPRT_LIB):$(CUDA)/targets/$(UNAMEP)-linux/lib
else
_LDPATH  = $(OMPRT_LIB):$(ATMI_LIB)
endif
RUNENV   = env LD_LIBRARY_PATH=$(_LDPATH):$(LD_LIBRARY_PATH) $(SET_DEVICE_DEBUG)

ifeq ($(NOOPT),1)
CFLAGS = -I$(OMPRT_INC)
else
CFLAGS = -O2 -I$(OMPRT_INC)
endif

ifeq ($(TEMPS), 1)
CFLAGS += -save-temps
endif

OMP_FLAGS = -target $(HOST_TARGET) -fopenmp $(TARGET)

ifeq ($(TEMPS), 1)
OMP_FLAGS += -save-temps
endif

ifeq ($(findstring gfx,$(TARGET)),)
LINK_FLAGS = -L$(OMPRT_LIB) -L$(OMPRT_LIB_BC) -L$(CUDA)/targets/$(UNAMEP)-linux/lib -lcudart
else
LINK_FLAGS = -L$(OMPRT_LIB) -L$(OMPRT_LIB_BC)
endif

